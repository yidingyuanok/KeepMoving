apply plugin: 'com.android.application'

def VERSION_NAME = "1.8.0"
def VERSION_CODE = 1008000
def APP_NAME = "com.mycheering.vpf"
def build_time

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        applicationId APP_NAME
        versionCode VERSION_CODE
        versionName VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        自动生成 BuildConfig.java 中变量 public static final String API_HOST = "api.gamev2.mycheering.com";
        buildConfigField("String", "API_HOST", "\"api.gamev2.mycheering.com\"")

        // 替换清单文件中的变量  android:authorities="${download_author}"
        manifestPlaceholders = [
                download_author  : "com.mycheering.downloadsdk.database",                       //下载sdk中数据库名
                game_channel     : "0",                                                         //渠道号
                game_ally_channel: "A50"                                                        //是否集成鼎开计数sdk
        ]

        flavorDimensions "versionCode"
    }

    signingConfigs {
        w371 {
            keyAlias 'platform'
            keyPassword 'android'
            storeFile file('w371_platform.keystore')
            storePassword 'android'
        }

        g5 {
            keyAlias 'androiddebugkey'
            keyPassword 'android'
            storeFile file('g5.keystore')
            storePassword 'android'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            def fileName
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if (variant.buildType.name.equals('release')) {
                    build_time = buildTime();
                    fileName = "${APP_NAME}_v${variant.versionName}_${build_time}.apk"
                } else if (variant.buildType.name.equals('debug')) {
                    fileName = "${APP_NAME}_v${variant.versionName}_debug.apk"
                }
                outputFileName = fileName
            }
        }
    }
}



def releaseTime() {
//    return new Date().format("MM-dd", TimeZone.getTimeZone("UTC"))
    def date = new Date()
//    def formattedDate = date.format('MM-dd_HH-mm')
    def formattedDate = date.format('MM-dd')
    return formattedDate

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile files('libs/pm.jar')

}

def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}


//task makeJar(type: Copy) {
//    delete 'build/libs/TestJar.jar'
//    from('build/intermediates/bundles/release/')
//    into('build/libs/')
//    include('classes.jar')
//    rename ('classes.jar', 'TestJar.jar')
//}
//
//makeJar.dependsOn(build)